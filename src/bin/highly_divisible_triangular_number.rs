/**
Highly divisible triangular number
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
**/
extern crate euler;

use std::collections::btree_map::BTreeMap;

// thx gauss
fn nth_triangular(n: i64) -> i64 {
    n * (n + 1) / 2
}

fn count_divisors(factors: &BTreeMap<i64, i64>) -> i64 {
    factors
        .into_iter()
        .fold(1, |acc, (_factor, freq)| acc * (freq + 1))
}

// seems like there could be a closed form solution, but here goes brute force
fn main() {
    let mut cache: Vec<i64> = Vec::new();
    for i in 1..1000000 {
        let trinum = nth_triangular(i);

        let factors = euler::factorize_with_cache(trinum, &mut cache, false);

        let divisors = count_divisors(&factors);
        println!("trinum {} = {}. {} divisors", i, trinum, divisors);
        if divisors > 500 {
            for (factor, freq) in factors.clone() {
                print!("{}^{} * ", factor, freq);
            }
            println!();
            break;
        }
    }
}
